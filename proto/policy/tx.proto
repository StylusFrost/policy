syntax = "proto3";
package StylusFrost.policy.policy;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "policy/types.proto";

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/StylusFrost/policy/x/policy/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the Msg service.
service Msg {
  // StoreRego to submit Rego code to the system
  rpc StoreRego(MsgStoreRego) returns (MsgStoreRegoResponse);
  //  Instantiate creates a new smart policy instance for the given code id.
  rpc InstantiatePolicy(MsgInstantiatePolicy)
      returns (MsgInstantiatePolicyResponse);
  // UpdateAdmin sets a new   admin for a smart policy
  rpc UpdateAdmin(MsgUpdateAdmin) returns (MsgUpdateAdminResponse);
  // ClearAdmin removes any admin stored for a smart policy
  rpc ClearAdmin(MsgClearAdmin) returns (MsgClearAdminResponse);
  // Migrate runs a code upgrade/ downgrade for a smart policy
  rpc MigratePolicy(MsgMigratePolicy) returns (MsgMigratePolicyResponse);
  // Execute submits the given message input to a smart policy
  rpc ExecutePolicy(MsgExecutePolicy) returns (MsgExecutePolicyResponse);
}

// MsgExecutePolicy submits the given message input to a smart policy
message MsgExecutePolicy {
  // Sender is the that actor that signed the messages
  string sender = 1;
  // Contract is the address of the smart policy
  string policy = 2;
  // Valid entry point
  string entry_point = 3 ;
  // Input json encoded message to be passed to the policy
  bytes input = 4 [ (gogoproto.casttype) = "encoding/json.RawMessage" ];
  // Funds coins that are transferred to the policy on execution
  repeated cosmos.base.v1beta1.Coin funds = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// MsgExecutePolicyResponse returns execution result data.
message MsgExecutePolicyResponse {
  // Data contains the json data returned from the smart policy
  bytes data = 1 [ (gogoproto.casttype) = "encoding/json.RawMessage" ];
}

// MsgStoreRego submit Rego code to the system
message MsgStoreRego {
    // Sender is the that actor that signed the messages
    string sender = 1;
    // REGOByteCode can be raw or gzip compressed
    bytes rego_byte_code = 2 [ (gogoproto.customname) = "REGOByteCode" ];
    // Valid entry points json encoded 
    bytes entry_points = 3 [ (gogoproto.casttype) = "encoding/json.RawMessage" ];
    // Source is a valid absolute HTTPS URI to the policy's source code,
    // optional
    string source = 4;
    // InstantiatePermission access control to apply on policy creation,
     // optional
    AccessConfig instantiate_permission = 5;
  }

// MsgStoreCodeResponse returns store result data.
message MsgStoreRegoResponse {
    // RegoID is the reference to the stored REGO code
    uint64 rego_id = 1 [ (gogoproto.customname) = "RegoID" ];
  }
  

// MsgInstantiatePolicy create a new smart policy instance for the given
// rego id.
message MsgInstantiatePolicy {
  // Sender is the that actor that signed the messages
  string sender = 1;
  // Admin is an optional address that can execute migrations
  string admin = 2;
  // RegoID is the reference to the stored REGO code
  uint64 rego_id = 3 [ (gogoproto.customname) = "RegoID" ];
  // Label is optional metadata to be stored with a policy instance.
  string label = 4;
   // Valid entry points json encoded 
  bytes entry_points = 5 [ (gogoproto.casttype) = "encoding/json.RawMessage" ];
  // Funds coins that are transferred to the policy on instantiation
  repeated cosmos.base.v1beta1.Coin funds = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}
// MsgInstantiatePolicyResponse return instantiation result data
message MsgInstantiatePolicyResponse {
  // Address is the bech32 address of the new policy instance.
  string address = 1;
}



// MsgUpdateAdmin sets a new admin for a smart policy
message MsgUpdateAdmin {
  // Sender is the that actor that signed the messages
  string sender = 1;
  // NewAdmin address to be set
  string new_admin = 2;
  // Policy is the address of the smart policy
  string policy = 3;
}

// MsgUpdateAdminResponse returns empty data
message MsgUpdateAdminResponse {}

// MsgClearAdmin removes any admin stored for a smart policy
message MsgClearAdmin {
  // Sender is the that actor that signed the messages
  string sender = 1;
  // Policy is the address of the smart policy
  string policy = 3;
}

// MsgClearAdminResponse returns empty data
message MsgClearAdminResponse {}


// MsgMigratePolicy runs a code upgrade/ downgrade for a smart policy
message MsgMigratePolicy {
  // Sender is the that actor that signed the messages
  string sender = 1;
  // Policy is the address of the smart policy
  string policy = 2;
  // RegoID references the new REGO code
  uint64 rego_id = 3 [ (gogoproto.customname) = "RegoID" ];
   // Valid entry points json encoded 
  bytes entry_points = 5 [ (gogoproto.casttype) = "encoding/json.RawMessage" ];
}

// MsgMigratePolicyResponse returns policy migration result data.
message MsgMigratePolicyResponse {}

