// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: policy/proposal.proto

package types

import (
	bytes "bytes"
	encoding_json "encoding/json"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// StoreRegoProposal gov proposal content type to submit REGO code to the system
type StoreRegoProposal struct {
	// Title is a short summary
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Description is a human readable text
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// RunAs is the address that is passed to the policy's environment as sender
	RunAs string `protobuf:"bytes,3,opt,name=run_as,json=runAs,proto3" json:"run_as,omitempty"`
	// REGOByteCode can be raw or gzip compressed
	REGOByteCode []byte `protobuf:"bytes,4,opt,name=rego_byte_code,json=regoByteCode,proto3" json:"rego_byte_code,omitempty"`
	// Valid entry points json encoded
	EntryPoints encoding_json.RawMessage `protobuf:"bytes,5,opt,name=entry_points,json=entryPoints,proto3,casttype=encoding/json.RawMessage" json:"entry_points,omitempty"`
	// Source is a valid absolute HTTPS URI to the policy's source code,
	// optional
	Source string `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	// InstantiatePermission access control to apply on policy creation,
	// optional
	InstantiatePermission *AccessConfig `protobuf:"bytes,7,opt,name=instantiate_permission,json=instantiatePermission,proto3" json:"instantiate_permission,omitempty"`
}

func (m *StoreRegoProposal) Reset()      { *m = StoreRegoProposal{} }
func (*StoreRegoProposal) ProtoMessage() {}
func (*StoreRegoProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_a410c3c96ebbf9a5, []int{0}
}
func (m *StoreRegoProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreRegoProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreRegoProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreRegoProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreRegoProposal.Merge(m, src)
}
func (m *StoreRegoProposal) XXX_Size() int {
	return m.Size()
}
func (m *StoreRegoProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreRegoProposal.DiscardUnknown(m)
}

var xxx_messageInfo_StoreRegoProposal proto.InternalMessageInfo

// InstantiatePolicyProposal gov proposal content type to instantiate a
// policy.
type InstantiatePolicyProposal struct {
	// Title is a short summary
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Description is a human readable text
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// RunAs is the address that is passed to the policy's environment as sender
	RunAs string `protobuf:"bytes,3,opt,name=run_as,json=runAs,proto3" json:"run_as,omitempty"`
	// Admin is an optional address that can execute migrations
	Admin string `protobuf:"bytes,4,opt,name=admin,proto3" json:"admin,omitempty"`
	// RegoID is the reference to the stored REGO code
	RegoID uint64 `protobuf:"varint,5,opt,name=rego_id,json=regoId,proto3" json:"rego_id,omitempty"`
	// Label is optional metadata to be stored with a policy instance.
	Label string `protobuf:"bytes,6,opt,name=label,proto3" json:"label,omitempty"`
	// Valid entry points json encoded
	EntryPoints encoding_json.RawMessage `protobuf:"bytes,7,opt,name=entry_points,json=entryPoints,proto3,casttype=encoding/json.RawMessage" json:"entry_points,omitempty"`
	// Funds coins that are transferred to the policy on instantiation
	Funds github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,8,rep,name=funds,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"funds"`
}

func (m *InstantiatePolicyProposal) Reset()      { *m = InstantiatePolicyProposal{} }
func (*InstantiatePolicyProposal) ProtoMessage() {}
func (*InstantiatePolicyProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_a410c3c96ebbf9a5, []int{1}
}
func (m *InstantiatePolicyProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstantiatePolicyProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstantiatePolicyProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstantiatePolicyProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstantiatePolicyProposal.Merge(m, src)
}
func (m *InstantiatePolicyProposal) XXX_Size() int {
	return m.Size()
}
func (m *InstantiatePolicyProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_InstantiatePolicyProposal.DiscardUnknown(m)
}

var xxx_messageInfo_InstantiatePolicyProposal proto.InternalMessageInfo

// MigratePolicyProposal gov proposal content type to migrate a policy.
type MigratePolicyProposal struct {
	// Title is a short summary
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Description is a human readable text
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// RunAs is the address that is passed to the policy's environment as sender
	RunAs string `protobuf:"bytes,3,opt,name=run_as,json=runAs,proto3" json:"run_as,omitempty"`
	// Policy is the address of the smart policy
	Policy string `protobuf:"bytes,4,opt,name=policy,proto3" json:"policy,omitempty"`
	// RegoID references the new REGO code
	RegoID uint64 `protobuf:"varint,5,opt,name=rego_id,json=regoId,proto3" json:"rego_id,omitempty"`
	// Valid entry points json encoded
	EntryPoints encoding_json.RawMessage `protobuf:"bytes,6,opt,name=entry_points,json=entryPoints,proto3,casttype=encoding/json.RawMessage" json:"entry_points,omitempty"`
}

func (m *MigratePolicyProposal) Reset()      { *m = MigratePolicyProposal{} }
func (*MigratePolicyProposal) ProtoMessage() {}
func (*MigratePolicyProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_a410c3c96ebbf9a5, []int{2}
}
func (m *MigratePolicyProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MigratePolicyProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MigratePolicyProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MigratePolicyProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MigratePolicyProposal.Merge(m, src)
}
func (m *MigratePolicyProposal) XXX_Size() int {
	return m.Size()
}
func (m *MigratePolicyProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MigratePolicyProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MigratePolicyProposal proto.InternalMessageInfo

func init() {
	proto.RegisterType((*StoreRegoProposal)(nil), "StylusFrost.policy.policy.StoreRegoProposal")
	proto.RegisterType((*InstantiatePolicyProposal)(nil), "StylusFrost.policy.policy.InstantiatePolicyProposal")
	proto.RegisterType((*MigratePolicyProposal)(nil), "StylusFrost.policy.policy.MigratePolicyProposal")
}

func init() { proto.RegisterFile("policy/proposal.proto", fileDescriptor_a410c3c96ebbf9a5) }

var fileDescriptor_a410c3c96ebbf9a5 = []byte{
	// 556 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x93, 0x6d, 0xcd, 0x98, 0x5b, 0x21, 0x88, 0xd6, 0x29, 0x9d, 0x50, 0x5a, 0x95, 0x03,
	0x3d, 0x40, 0xc2, 0x86, 0xc4, 0x15, 0xad, 0xe5, 0x8f, 0x7a, 0x98, 0xa8, 0xb2, 0x1b, 0x07, 0xaa,
	0xfc, 0xf1, 0x82, 0x21, 0xf5, 0x1b, 0xf9, 0x75, 0x80, 0x7c, 0x0b, 0x3e, 0x06, 0xe2, 0x93, 0xf4,
	0x38, 0x89, 0xcb, 0x4e, 0x1d, 0x4b, 0xf9, 0x14, 0x9c, 0x50, 0x12, 0x83, 0x22, 0x10, 0x12, 0x3b,
	0xec, 0x64, 0x3f, 0xb6, 0x9f, 0x37, 0xce, 0xcf, 0xcf, 0x4b, 0xba, 0x29, 0x24, 0x2c, 0xcc, 0xdd,
	0x54, 0x40, 0x0a, 0xe8, 0x27, 0x4e, 0x2a, 0x40, 0x82, 0xd9, 0x3b, 0x91, 0x79, 0x92, 0xe1, 0x73,
	0x01, 0x28, 0x9d, 0xfa, 0x88, 0x1a, 0xf6, 0xed, 0x10, 0x70, 0x01, 0xe8, 0x06, 0x3e, 0x52, 0xf7,
	0xfd, 0x41, 0x40, 0xa5, 0x7f, 0xe0, 0x86, 0xc0, 0x78, 0x6d, 0xdd, 0xdf, 0x8d, 0x21, 0x86, 0x6a,
	0xea, 0x96, 0x33, 0xb5, 0x6a, 0xaa, 0xef, 0xc8, 0x3c, 0xa5, 0x58, 0xaf, 0x0d, 0xbf, 0x6e, 0x90,
	0xdb, 0x27, 0x12, 0x04, 0xf5, 0x68, 0x0c, 0x33, 0x75, 0x01, 0x73, 0x97, 0xb4, 0x24, 0x93, 0x09,
	0xb5, 0xf4, 0x81, 0x3e, 0xda, 0xf1, 0x6a, 0x61, 0x0e, 0x48, 0x3b, 0xa2, 0x18, 0x0a, 0x96, 0x4a,
	0x06, 0xdc, 0xda, 0xa8, 0xf6, 0x9a, 0x4b, 0x66, 0x97, 0x18, 0x22, 0xe3, 0x73, 0x1f, 0xad, 0xcd,
	0xda, 0x28, 0x32, 0x7e, 0x84, 0xe6, 0x63, 0x72, 0x53, 0xd0, 0x18, 0xe6, 0x41, 0x2e, 0xe9, 0x3c,
	0x84, 0x88, 0x5a, 0x5b, 0x03, 0x7d, 0xd4, 0x19, 0xdf, 0x2a, 0x56, 0xfd, 0x8e, 0xf7, 0xec, 0xc5,
	0xcb, 0x71, 0x2e, 0xe9, 0x04, 0x22, 0xea, 0x75, 0xca, 0x73, 0xbf, 0x94, 0xf9, 0x84, 0x74, 0x28,
	0x97, 0x22, 0x9f, 0xa7, 0xc0, 0xb8, 0x44, 0xab, 0x55, 0xb9, 0xee, 0xfc, 0x58, 0xf5, 0x2d, 0xca,
	0x43, 0x88, 0x18, 0x8f, 0xdd, 0xb7, 0x08, 0xdc, 0xf1, 0xfc, 0x0f, 0xc7, 0x14, 0xd1, 0x8f, 0xa9,
	0xd7, 0xae, 0x1c, 0xb3, 0xca, 0x60, 0xee, 0x11, 0x03, 0x21, 0x13, 0x21, 0xb5, 0x8c, 0xea, 0x3e,
	0x4a, 0x99, 0xaf, 0xc9, 0x1e, 0xe3, 0x28, 0x7d, 0x2e, 0x99, 0x2f, 0xe9, 0x3c, 0xa5, 0x62, 0xc1,
	0x10, 0xcb, 0x9f, 0xda, 0x1e, 0xe8, 0xa3, 0xf6, 0xe1, 0x3d, 0xe7, 0x9f, 0xec, 0x9d, 0xa3, 0x30,
	0xa4, 0x88, 0x13, 0xe0, 0xa7, 0x2c, 0xf6, 0xba, 0x8d, 0x32, 0xb3, 0xdf, 0x55, 0x86, 0x17, 0x1b,
	0xa4, 0x37, 0x6d, 0xec, 0x54, 0xce, 0xeb, 0xa2, 0xbb, 0x4b, 0x5a, 0x7e, 0xb4, 0x60, 0xbc, 0x82,
	0xba, 0xe3, 0xd5, 0xc2, 0xbc, 0x4b, 0xb6, 0x2b, 0xe6, 0x2c, 0xaa, 0xb0, 0x6d, 0x8d, 0x49, 0xb1,
	0xea, 0x1b, 0xe5, 0x2b, 0x4f, 0x9f, 0x7a, 0x46, 0xb9, 0x35, 0x8d, 0x4a, 0x6b, 0xe2, 0x07, 0x34,
	0x51, 0x78, 0x6a, 0xf1, 0x17, 0xf6, 0xed, 0xab, 0x62, 0xf7, 0x49, 0xeb, 0x34, 0xe3, 0x11, 0x5a,
	0x37, 0x06, 0x9b, 0xa3, 0xf6, 0x61, 0xcf, 0xa9, 0xe3, 0xea, 0x94, 0x71, 0x75, 0x54, 0x5c, 0x9d,
	0x09, 0x30, 0x3e, 0x7e, 0xb8, 0x5c, 0xf5, 0xb5, 0x2f, 0x17, 0xfd, 0x51, 0xcc, 0xe4, 0x9b, 0x2c,
	0x70, 0x42, 0x58, 0xb8, 0x2a, 0xdb, 0xf5, 0xf0, 0x00, 0xa3, 0x77, 0x2a, 0xb0, 0xa5, 0x01, 0xbd,
	0xba, 0xf2, 0xf0, 0xbb, 0x4e, 0xba, 0xc7, 0x2c, 0x16, 0xd7, 0x4e, 0x77, 0x8f, 0x18, 0xf5, 0xc3,
	0x2b, 0xbc, 0x4a, 0xfd, 0x1f, 0xdf, 0x3f, 0x49, 0x1a, 0x57, 0x24, 0x39, 0xf6, 0x96, 0x97, 0xb6,
	0x76, 0x7e, 0x69, 0x6b, 0x9f, 0x0b, 0x5b, 0x5f, 0x16, 0xb6, 0x7e, 0x56, 0xd8, 0xfa, 0xb7, 0xc2,
	0xd6, 0x3f, 0xad, 0x6d, 0xed, 0x6c, 0x6d, 0x6b, 0xe7, 0x6b, 0x5b, 0x7b, 0x75, 0xbf, 0x41, 0xaf,
	0x11, 0x5c, 0x57, 0xf5, 0xfb, 0x47, 0xb7, 0xd9, 0xf8, 0x81, 0x51, 0x75, 0xfe, 0xa3, 0x9f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x93, 0x59, 0xb0, 0x3d, 0x77, 0x04, 0x00, 0x00,
}

func (this *StoreRegoProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StoreRegoProposal)
	if !ok {
		that2, ok := that.(StoreRegoProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.RunAs != that1.RunAs {
		return false
	}
	if !bytes.Equal(this.REGOByteCode, that1.REGOByteCode) {
		return false
	}
	if !bytes.Equal(this.EntryPoints, that1.EntryPoints) {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	if !this.InstantiatePermission.Equal(that1.InstantiatePermission) {
		return false
	}
	return true
}
func (this *InstantiatePolicyProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InstantiatePolicyProposal)
	if !ok {
		that2, ok := that.(InstantiatePolicyProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.RunAs != that1.RunAs {
		return false
	}
	if this.Admin != that1.Admin {
		return false
	}
	if this.RegoID != that1.RegoID {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if !bytes.Equal(this.EntryPoints, that1.EntryPoints) {
		return false
	}
	if len(this.Funds) != len(that1.Funds) {
		return false
	}
	for i := range this.Funds {
		if !this.Funds[i].Equal(&that1.Funds[i]) {
			return false
		}
	}
	return true
}
func (this *MigratePolicyProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MigratePolicyProposal)
	if !ok {
		that2, ok := that.(MigratePolicyProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.RunAs != that1.RunAs {
		return false
	}
	if this.Policy != that1.Policy {
		return false
	}
	if this.RegoID != that1.RegoID {
		return false
	}
	if !bytes.Equal(this.EntryPoints, that1.EntryPoints) {
		return false
	}
	return true
}
func (m *StoreRegoProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreRegoProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreRegoProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InstantiatePermission != nil {
		{
			size, err := m.InstantiatePermission.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EntryPoints) > 0 {
		i -= len(m.EntryPoints)
		copy(dAtA[i:], m.EntryPoints)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.EntryPoints)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.REGOByteCode) > 0 {
		i -= len(m.REGOByteCode)
		copy(dAtA[i:], m.REGOByteCode)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.REGOByteCode)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RunAs) > 0 {
		i -= len(m.RunAs)
		copy(dAtA[i:], m.RunAs)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.RunAs)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InstantiatePolicyProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstantiatePolicyProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstantiatePolicyProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Funds) > 0 {
		for iNdEx := len(m.Funds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Funds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.EntryPoints) > 0 {
		i -= len(m.EntryPoints)
		copy(dAtA[i:], m.EntryPoints)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.EntryPoints)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x32
	}
	if m.RegoID != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.RegoID))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RunAs) > 0 {
		i -= len(m.RunAs)
		copy(dAtA[i:], m.RunAs)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.RunAs)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MigratePolicyProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MigratePolicyProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MigratePolicyProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EntryPoints) > 0 {
		i -= len(m.EntryPoints)
		copy(dAtA[i:], m.EntryPoints)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.EntryPoints)))
		i--
		dAtA[i] = 0x32
	}
	if m.RegoID != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.RegoID))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Policy) > 0 {
		i -= len(m.Policy)
		copy(dAtA[i:], m.Policy)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Policy)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RunAs) > 0 {
		i -= len(m.RunAs)
		copy(dAtA[i:], m.RunAs)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.RunAs)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StoreRegoProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.RunAs)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.REGOByteCode)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.EntryPoints)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.InstantiatePermission != nil {
		l = m.InstantiatePermission.Size()
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *InstantiatePolicyProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.RunAs)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.RegoID != 0 {
		n += 1 + sovProposal(uint64(m.RegoID))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.EntryPoints)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if len(m.Funds) > 0 {
		for _, e := range m.Funds {
			l = e.Size()
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	return n
}

func (m *MigratePolicyProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.RunAs)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Policy)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.RegoID != 0 {
		n += 1 + sovProposal(uint64(m.RegoID))
	}
	l = len(m.EntryPoints)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StoreRegoProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreRegoProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreRegoProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunAs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunAs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field REGOByteCode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.REGOByteCode = append(m.REGOByteCode[:0], dAtA[iNdEx:postIndex]...)
			if m.REGOByteCode == nil {
				m.REGOByteCode = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryPoints", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryPoints = append(m.EntryPoints[:0], dAtA[iNdEx:postIndex]...)
			if m.EntryPoints == nil {
				m.EntryPoints = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstantiatePermission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InstantiatePermission == nil {
				m.InstantiatePermission = &AccessConfig{}
			}
			if err := m.InstantiatePermission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstantiatePolicyProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstantiatePolicyProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstantiatePolicyProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunAs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunAs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegoID", wireType)
			}
			m.RegoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegoID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryPoints", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryPoints = append(m.EntryPoints[:0], dAtA[iNdEx:postIndex]...)
			if m.EntryPoints == nil {
				m.EntryPoints = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Funds = append(m.Funds, types.Coin{})
			if err := m.Funds[len(m.Funds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MigratePolicyProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MigratePolicyProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MigratePolicyProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunAs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunAs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegoID", wireType)
			}
			m.RegoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegoID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryPoints", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryPoints = append(m.EntryPoints[:0], dAtA[iNdEx:postIndex]...)
			if m.EntryPoints == nil {
				m.EntryPoints = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
