// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: policy/query.proto

package types

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_tendermint_tendermint_libs_bytes "github.com/tendermint/tendermint/libs/bytes"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryRegoRequest is the request type for the Query/Code RPC method
type QueryRegoRequest struct {
	RegoId uint64 `protobuf:"varint,1,opt,name=rego_id,json=regoId,proto3" json:"rego_id,omitempty"`
}

func (m *QueryRegoRequest) Reset()         { *m = QueryRegoRequest{} }
func (m *QueryRegoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRegoRequest) ProtoMessage()    {}
func (*QueryRegoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7e8b43f6e481a8b, []int{0}
}
func (m *QueryRegoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegoRequest.Merge(m, src)
}
func (m *QueryRegoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegoRequest proto.InternalMessageInfo

// QueryRegoResponse is the response type for the Query/Rego RPC method
type QueryRegoResponse struct {
	*RegoInfoResponse `protobuf:"bytes,1,opt,name=rego_info,json=regoInfo,proto3,embedded=rego_info" json:""`
	Data              []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (m *QueryRegoResponse) Reset()         { *m = QueryRegoResponse{} }
func (m *QueryRegoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRegoResponse) ProtoMessage()    {}
func (*QueryRegoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7e8b43f6e481a8b, []int{1}
}
func (m *QueryRegoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegoResponse.Merge(m, src)
}
func (m *QueryRegoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegoResponse proto.InternalMessageInfo

// RegoInfoResponse contains rego meta data from RegoInfo
type RegoInfoResponse struct {
	RegoID      uint64                                               `protobuf:"varint,1,opt,name=rego_id,json=regoId,proto3" json:"id"`
	Creator     string                                               `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	RegoHash    github_com_tendermint_tendermint_libs_bytes.HexBytes `protobuf:"bytes,3,opt,name=rego_hash,json=regoHash,proto3,casttype=github.com/tendermint/tendermint/libs/bytes.HexBytes" json:"rego_hash,omitempty"`
	Source      string                                               `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	EntryPoints []string                                             `protobuf:"bytes,5,rep,name=entryPoints,proto3" json:"entryPoints,omitempty"`
}

func (m *RegoInfoResponse) Reset()         { *m = RegoInfoResponse{} }
func (m *RegoInfoResponse) String() string { return proto.CompactTextString(m) }
func (*RegoInfoResponse) ProtoMessage()    {}
func (*RegoInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7e8b43f6e481a8b, []int{2}
}
func (m *RegoInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegoInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegoInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegoInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegoInfoResponse.Merge(m, src)
}
func (m *RegoInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegoInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegoInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegoInfoResponse proto.InternalMessageInfo

// QueryRegosRequest is the request type for the Query/Codes RPC method
type QueryRegosRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRegosRequest) Reset()         { *m = QueryRegosRequest{} }
func (m *QueryRegosRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRegosRequest) ProtoMessage()    {}
func (*QueryRegosRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7e8b43f6e481a8b, []int{3}
}
func (m *QueryRegosRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegosRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegosRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegosRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegosRequest.Merge(m, src)
}
func (m *QueryRegosRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegosRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegosRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegosRequest proto.InternalMessageInfo

// QueryCodesResponse is the response type for the Query/Regos RPC method
type QueryRegosResponse struct {
	RegoInfos []RegoInfoResponse `protobuf:"bytes,1,rep,name=rego_infos,json=regoInfos,proto3" json:"rego_infos"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRegosResponse) Reset()         { *m = QueryRegosResponse{} }
func (m *QueryRegosResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRegosResponse) ProtoMessage()    {}
func (*QueryRegosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7e8b43f6e481a8b, []int{4}
}
func (m *QueryRegosResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegosResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegosResponse.Merge(m, src)
}
func (m *QueryRegosResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegosResponse proto.InternalMessageInfo

// QueryPolicyInfoRequest is the request type for the Query/PolicyInfo RPC
// method
type QueryPolicyInfoRequest struct {
	// address is the address of the policy to query
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryPolicyInfoRequest) Reset()         { *m = QueryPolicyInfoRequest{} }
func (m *QueryPolicyInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPolicyInfoRequest) ProtoMessage()    {}
func (*QueryPolicyInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7e8b43f6e481a8b, []int{5}
}
func (m *QueryPolicyInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPolicyInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPolicyInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPolicyInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPolicyInfoRequest.Merge(m, src)
}
func (m *QueryPolicyInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPolicyInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPolicyInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPolicyInfoRequest proto.InternalMessageInfo

// QueryPolicyInfoResponse is the response type for the Query/PolicyInfo RPC
// method
type QueryPolicyInfoResponse struct {
	// address is the address of the policy
	Address    string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PolicyInfo `protobuf:"bytes,2,opt,name=policy_info,json=policyInfo,proto3,embedded=policy_info" json:""`
}

func (m *QueryPolicyInfoResponse) Reset()         { *m = QueryPolicyInfoResponse{} }
func (m *QueryPolicyInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPolicyInfoResponse) ProtoMessage()    {}
func (*QueryPolicyInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7e8b43f6e481a8b, []int{6}
}
func (m *QueryPolicyInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPolicyInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPolicyInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPolicyInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPolicyInfoResponse.Merge(m, src)
}
func (m *QueryPolicyInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPolicyInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPolicyInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPolicyInfoResponse proto.InternalMessageInfo

// QueryPoliciesByRegoCodeRequest is the request type for the Query/PoliciesByRegoCode
// RPC method
type QueryPoliciesByRegoCodeRequest struct {
	RegoId uint64 `protobuf:"varint,1,opt,name=rego_id,json=regoId,proto3" json:"rego_id,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPoliciesByRegoCodeRequest) Reset()         { *m = QueryPoliciesByRegoCodeRequest{} }
func (m *QueryPoliciesByRegoCodeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoliciesByRegoCodeRequest) ProtoMessage()    {}
func (*QueryPoliciesByRegoCodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7e8b43f6e481a8b, []int{7}
}
func (m *QueryPoliciesByRegoCodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoliciesByRegoCodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoliciesByRegoCodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoliciesByRegoCodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoliciesByRegoCodeRequest.Merge(m, src)
}
func (m *QueryPoliciesByRegoCodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoliciesByRegoCodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoliciesByRegoCodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoliciesByRegoCodeRequest proto.InternalMessageInfo

// QueryPoliciesByRegoCodeResponse is the response type for the
// Query/PoliciesByRegoCode RPC method
type QueryPoliciesByRegoCodeResponse struct {
	// policies are a set of policy addresses
	Policies []string `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPoliciesByRegoCodeResponse) Reset()         { *m = QueryPoliciesByRegoCodeResponse{} }
func (m *QueryPoliciesByRegoCodeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoliciesByRegoCodeResponse) ProtoMessage()    {}
func (*QueryPoliciesByRegoCodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7e8b43f6e481a8b, []int{8}
}
func (m *QueryPoliciesByRegoCodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoliciesByRegoCodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoliciesByRegoCodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoliciesByRegoCodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoliciesByRegoCodeResponse.Merge(m, src)
}
func (m *QueryPoliciesByRegoCodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoliciesByRegoCodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoliciesByRegoCodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoliciesByRegoCodeResponse proto.InternalMessageInfo

// QueryPolicyHistoryRequest is the request type for the Query/PolicyHistory
// RPC method
type QueryPolicyHistoryRequest struct {
	// address is the address of the policy to query
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPolicyHistoryRequest) Reset()         { *m = QueryPolicyHistoryRequest{} }
func (m *QueryPolicyHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPolicyHistoryRequest) ProtoMessage()    {}
func (*QueryPolicyHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7e8b43f6e481a8b, []int{9}
}
func (m *QueryPolicyHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPolicyHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPolicyHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPolicyHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPolicyHistoryRequest.Merge(m, src)
}
func (m *QueryPolicyHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPolicyHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPolicyHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPolicyHistoryRequest proto.InternalMessageInfo

// QueryPolicyHistoryResponse is the response type for the
// Query/PolicyHistory RPC method
type QueryPolicyHistoryResponse struct {
	Entries []PolicyRegoHistoryEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPolicyHistoryResponse) Reset()         { *m = QueryPolicyHistoryResponse{} }
func (m *QueryPolicyHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPolicyHistoryResponse) ProtoMessage()    {}
func (*QueryPolicyHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7e8b43f6e481a8b, []int{10}
}
func (m *QueryPolicyHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPolicyHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPolicyHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPolicyHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPolicyHistoryResponse.Merge(m, src)
}
func (m *QueryPolicyHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPolicyHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPolicyHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPolicyHistoryResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryRegoRequest)(nil), "StylusFrost.policy.policy.QueryRegoRequest")
	proto.RegisterType((*QueryRegoResponse)(nil), "StylusFrost.policy.policy.QueryRegoResponse")
	proto.RegisterType((*RegoInfoResponse)(nil), "StylusFrost.policy.policy.RegoInfoResponse")
	proto.RegisterType((*QueryRegosRequest)(nil), "StylusFrost.policy.policy.QueryRegosRequest")
	proto.RegisterType((*QueryRegosResponse)(nil), "StylusFrost.policy.policy.QueryRegosResponse")
	proto.RegisterType((*QueryPolicyInfoRequest)(nil), "StylusFrost.policy.policy.QueryPolicyInfoRequest")
	proto.RegisterType((*QueryPolicyInfoResponse)(nil), "StylusFrost.policy.policy.QueryPolicyInfoResponse")
	proto.RegisterType((*QueryPoliciesByRegoCodeRequest)(nil), "StylusFrost.policy.policy.QueryPoliciesByRegoCodeRequest")
	proto.RegisterType((*QueryPoliciesByRegoCodeResponse)(nil), "StylusFrost.policy.policy.QueryPoliciesByRegoCodeResponse")
	proto.RegisterType((*QueryPolicyHistoryRequest)(nil), "StylusFrost.policy.policy.QueryPolicyHistoryRequest")
	proto.RegisterType((*QueryPolicyHistoryResponse)(nil), "StylusFrost.policy.policy.QueryPolicyHistoryResponse")
}

func init() { proto.RegisterFile("policy/query.proto", fileDescriptor_a7e8b43f6e481a8b) }

var fileDescriptor_a7e8b43f6e481a8b = []byte{
	// 868 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xce, 0xa4, 0xf9, 0xf9, 0x52, 0x50, 0x19, 0xad, 0xba, 0x5e, 0x6b, 0x65, 0x87, 0x48, 0xb0,
	0x81, 0x5d, 0x6c, 0x25, 0x2c, 0x12, 0xec, 0x31, 0x40, 0x69, 0x2f, 0x28, 0x35, 0x70, 0x81, 0x03,
	0x72, 0xe2, 0xa9, 0x63, 0x29, 0xf5, 0xb8, 0x9e, 0x09, 0x6a, 0xa8, 0x7a, 0x28, 0x07, 0x2e, 0x1c,
	0x40, 0x42, 0xdc, 0x39, 0x21, 0x6e, 0x5c, 0x38, 0xf0, 0x27, 0xf4, 0x58, 0x89, 0x0b, 0xa7, 0x08,
	0x52, 0x0e, 0xa8, 0x07, 0xfe, 0x00, 0x2e, 0xac, 0x3c, 0x1e, 0x27, 0x4e, 0xda, 0x34, 0x69, 0xd5,
	0x4b, 0x3c, 0x93, 0x79, 0x3f, 0xbe, 0xf7, 0x7d, 0xef, 0x8d, 0x0d, 0x38, 0xa0, 0x7d, 0xaf, 0x3b,
	0x34, 0x0f, 0x06, 0x24, 0x1c, 0x1a, 0x41, 0x48, 0x39, 0xc5, 0x0f, 0x3e, 0xe2, 0xc3, 0xfe, 0x80,
	0x6d, 0x85, 0x94, 0x71, 0x23, 0x3e, 0x97, 0x0f, 0xf5, 0x9e, 0x4b, 0x5d, 0x2a, 0xac, 0xcc, 0x68,
	0x15, 0x3b, 0xa8, 0x0f, 0x5d, 0x4a, 0xdd, 0x3e, 0x31, 0xed, 0xc0, 0x33, 0x6d, 0xdf, 0xa7, 0xdc,
	0xe6, 0x1e, 0xf5, 0x99, 0x3c, 0x7d, 0xbd, 0x4b, 0xd9, 0x3e, 0x65, 0x66, 0xc7, 0x66, 0x24, 0xce,
	0x63, 0x7e, 0xd1, 0xe8, 0x10, 0x6e, 0x37, 0xcc, 0xc0, 0x76, 0x3d, 0x5f, 0x18, 0x4b, 0xdb, 0x04,
	0x0e, 0x1f, 0x06, 0x44, 0xfa, 0xd7, 0x1e, 0xc3, 0xc6, 0x6e, 0xe4, 0x65, 0x11, 0x97, 0x5a, 0xe4,
	0x60, 0x40, 0x18, 0xc7, 0xf7, 0xa1, 0x18, 0x12, 0x97, 0x7e, 0xee, 0x39, 0x0a, 0xaa, 0xa2, 0x7a,
	0xce, 0x2a, 0x44, 0xdb, 0x1d, 0xa7, 0xf6, 0x0d, 0x82, 0x97, 0x52, 0xd6, 0x2c, 0xa0, 0x3e, 0x23,
	0xd8, 0x82, 0x72, 0x6c, 0xee, 0xef, 0x51, 0xe1, 0x50, 0x69, 0x3e, 0x36, 0x16, 0x56, 0x69, 0x44,
	0xbe, 0x3b, 0xfe, 0xde, 0xc4, 0xbf, 0x55, 0x3a, 0x1b, 0xe9, 0xe8, 0x62, 0xa4, 0x67, 0xac, 0x52,
	0x28, 0xcf, 0xf0, 0x43, 0xc8, 0x39, 0x36, 0xb7, 0x95, 0x6c, 0x15, 0xd5, 0xd7, 0x5b, 0xa5, 0x8b,
	0x91, 0x2e, 0xf6, 0x96, 0xf8, 0x7d, 0x96, 0xfb, 0xe7, 0x47, 0x1d, 0xd5, 0xfe, 0x45, 0xb0, 0x31,
	0x1f, 0x0c, 0xbf, 0x36, 0x87, 0xbd, 0xb5, 0x31, 0x1e, 0xe9, 0x05, 0x61, 0xf6, 0xde, 0xc5, 0x48,
	0xcf, 0x7a, 0x4e, 0x52, 0x0d, 0x56, 0xa0, 0xd8, 0x0d, 0x89, 0xcd, 0x69, 0x28, 0xd2, 0x94, 0xad,
	0x64, 0x8b, 0x3f, 0x91, 0x15, 0xf5, 0x6c, 0xd6, 0x53, 0xd6, 0x04, 0x84, 0xb7, 0xff, 0x1b, 0xe9,
	0x4f, 0x5d, 0x8f, 0xf7, 0x06, 0x1d, 0xa3, 0x4b, 0xf7, 0x4d, 0x4e, 0x7c, 0x87, 0x84, 0xfb, 0x9e,
	0xcf, 0xd3, 0xcb, 0xbe, 0xd7, 0x61, 0x66, 0x67, 0xc8, 0x09, 0x33, 0xb6, 0xc9, 0x61, 0x2b, 0x5a,
	0xc4, 0x45, 0x6d, 0xdb, 0xac, 0x87, 0x37, 0xa1, 0xc0, 0xe8, 0x20, 0xec, 0x12, 0x25, 0x27, 0xf2,
	0xc9, 0x1d, 0xae, 0x42, 0x85, 0xf8, 0x3c, 0x1c, 0xb6, 0xa9, 0xe7, 0x73, 0xa6, 0xe4, 0xab, 0x6b,
	0xf5, 0xb2, 0x95, 0xfe, 0x4b, 0x16, 0xfc, 0x59, 0x8a, 0x7d, 0x96, 0x88, 0xb5, 0x05, 0x30, 0x15,
	0x5a, 0xd2, 0xff, 0xaa, 0x11, 0x77, 0x85, 0x11, 0x75, 0x85, 0x11, 0x77, 0x9f, 0xec, 0x0a, 0xa3,
	0x6d, 0xbb, 0x44, 0xfa, 0x5a, 0x29, 0xcf, 0xda, 0x2f, 0x08, 0x70, 0x3a, 0xba, 0xe4, 0xb3, 0x0d,
	0x30, 0x11, 0x97, 0x29, 0xa8, 0xba, 0x76, 0x53, 0x75, 0x73, 0xa7, 0x91, 0xb2, 0xe5, 0x44, 0x59,
	0x86, 0x3f, 0x98, 0x01, 0x9c, 0x15, 0x80, 0x1f, 0x2d, 0x05, 0x1c, 0x47, 0x9b, 0x41, 0xdc, 0x84,
	0x4d, 0x01, 0xb8, 0x2d, 0x32, 0xc7, 0x49, 0x63, 0x4e, 0x14, 0x28, 0xda, 0x8e, 0x13, 0x12, 0xc6,
	0x04, 0x21, 0x65, 0x2b, 0xd9, 0xd6, 0xbe, 0x45, 0x70, 0xff, 0x92, 0x93, 0x2c, 0x75, 0xa1, 0x17,
	0xfe, 0x18, 0x2a, 0x71, 0x79, 0x71, 0x8f, 0xc7, 0x98, 0x5f, 0xb9, 0x86, 0x85, 0x69, 0xf4, 0xd6,
	0x7a, 0x54, 0xff, 0xa4, 0xc3, 0x21, 0x98, 0x9c, 0x48, 0x51, 0x4f, 0x10, 0x68, 0x53, 0x44, 0x1e,
	0x61, 0x2d, 0xa1, 0xc0, 0xbb, 0xd4, 0x21, 0xcb, 0xe6, 0x71, 0x4e, 0xfb, 0xec, 0xad, 0xb5, 0xff,
	0x1a, 0x81, 0xbe, 0x10, 0x83, 0x64, 0x47, 0x85, 0x52, 0x20, 0x4f, 0x45, 0x1b, 0x94, 0xad, 0xc9,
	0xfe, 0xee, 0x24, 0x3d, 0x86, 0x07, 0x29, 0x75, 0xb6, 0x3d, 0xc6, 0x69, 0xd4, 0x90, 0x4b, 0x54,
	0xbd, 0x33, 0x1e, 0x7e, 0x43, 0xa0, 0x5e, 0x95, 0x5f, 0x52, 0xb0, 0x0b, 0xc5, 0x68, 0x28, 0x13,
	0x06, 0x2a, 0xcd, 0xc6, 0xd2, 0x16, 0x88, 0x68, 0x94, 0x61, 0xde, 0x8f, 0xe6, 0x59, 0x8e, 0x43,
	0x12, 0xe7, 0xce, 0x98, 0x6b, 0xfe, 0x9f, 0x87, 0xbc, 0x80, 0x8e, 0x4f, 0x10, 0xe4, 0xa2, 0xb4,
	0xf8, 0xba, 0x31, 0x9d, 0xbf, 0xf3, 0xd5, 0x27, 0xab, 0x19, 0xc7, 0x99, 0x6b, 0xda, 0x57, 0xbf,
	0xff, 0xfd, 0x7d, 0x56, 0xc1, 0x9b, 0xa6, 0x7c, 0xa5, 0x44, 0x0d, 0x69, 0x1e, 0xc9, 0x2e, 0x3d,
	0xc6, 0x5f, 0x42, 0x5e, 0x5c, 0x23, 0x78, 0xa5, 0xb0, 0xc9, 0x5d, 0xa6, 0xbe, 0xb1, 0xa2, 0xb5,
	0x44, 0x71, 0x4f, 0xa0, 0x78, 0x11, 0xaf, 0xa7, 0x51, 0xe0, 0x1f, 0x10, 0xc0, 0x74, 0xfe, 0x70,
	0x63, 0x59, 0xcc, 0x4b, 0xd7, 0x87, 0xda, 0xbc, 0x89, 0x8b, 0xc4, 0x52, 0x15, 0x58, 0x54, 0xac,
	0x24, 0x58, 0xe4, 0xe3, 0x48, 0xf6, 0xe8, 0x31, 0xfe, 0x15, 0x01, 0xbe, 0x3c, 0x5f, 0xf8, 0x9d,
	0x95, 0x92, 0x5d, 0x75, 0x2f, 0xa8, 0xcf, 0x6e, 0xe3, 0x2a, 0xf1, 0x3e, 0x12, 0x78, 0x5f, 0xc6,
	0xfa, 0xd5, 0x0a, 0x9a, 0x93, 0xd9, 0xfe, 0x09, 0xc1, 0x0b, 0x33, 0xe3, 0x80, 0x9f, 0xae, 0x46,
	0xcf, 0xec, 0xf4, 0xaa, 0x6f, 0xdd, 0xd0, 0x4b, 0xe2, 0xac, 0x0b, 0x9c, 0x35, 0x5c, 0x5d, 0xc4,
	0xab, 0xd9, 0x8b, 0x3d, 0x5a, 0x1f, 0x9e, 0xfe, 0xa5, 0x65, 0x7e, 0x1e, 0x6b, 0x99, 0xd3, 0xb1,
	0x86, 0xce, 0xc6, 0x1a, 0xfa, 0x73, 0xac, 0xa1, 0xef, 0xce, 0xb5, 0xcc, 0xd9, 0xb9, 0x96, 0xf9,
	0xe3, 0x5c, 0xcb, 0x7c, 0xfa, 0x24, 0xf5, 0xfe, 0x4e, 0x81, 0x49, 0x42, 0x1e, 0x9a, 0xe9, 0xef,
	0xa3, 0x4e, 0x41, 0x7c, 0x20, 0xbd, 0xf9, 0x3c, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xf1, 0x04, 0xf2,
	0xc5, 0x09, 0x00, 0x00,
}

func (this *QueryRegoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryRegoResponse)
	if !ok {
		that2, ok := that.(QueryRegoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RegoInfoResponse.Equal(that1.RegoInfoResponse) {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *RegoInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegoInfoResponse)
	if !ok {
		that2, ok := that.(RegoInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RegoID != that1.RegoID {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	if !bytes.Equal(this.RegoHash, that1.RegoHash) {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	if len(this.EntryPoints) != len(that1.EntryPoints) {
		return false
	}
	for i := range this.EntryPoints {
		if this.EntryPoints[i] != that1.EntryPoints[i] {
			return false
		}
	}
	return true
}
func (this *QueryPolicyInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryPolicyInfoResponse)
	if !ok {
		that2, ok := that.(QueryPolicyInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.PolicyInfo.Equal(&that1.PolicyInfo) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Rego gets the binary code and metadata for a singe rego code
	Rego(ctx context.Context, in *QueryRegoRequest, opts ...grpc.CallOption) (*QueryRegoResponse, error)
	// Regos gets the metadata for all stored rego codes
	Regos(ctx context.Context, in *QueryRegosRequest, opts ...grpc.CallOption) (*QueryRegosResponse, error)
	// PolicyInfo gets the policy meta data
	PolicyInfo(ctx context.Context, in *QueryPolicyInfoRequest, opts ...grpc.CallOption) (*QueryPolicyInfoResponse, error)
	// PoliciesByRegoCode lists all smart policies for a rego id
	PoliciesByRegoCode(ctx context.Context, in *QueryPoliciesByRegoCodeRequest, opts ...grpc.CallOption) (*QueryPoliciesByRegoCodeResponse, error)
	// PolicyHistory gets the policy code history
	PolicyHistory(ctx context.Context, in *QueryPolicyHistoryRequest, opts ...grpc.CallOption) (*QueryPolicyHistoryResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Rego(ctx context.Context, in *QueryRegoRequest, opts ...grpc.CallOption) (*QueryRegoResponse, error) {
	out := new(QueryRegoResponse)
	err := c.cc.Invoke(ctx, "/StylusFrost.policy.policy.Query/Rego", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Regos(ctx context.Context, in *QueryRegosRequest, opts ...grpc.CallOption) (*QueryRegosResponse, error) {
	out := new(QueryRegosResponse)
	err := c.cc.Invoke(ctx, "/StylusFrost.policy.policy.Query/Regos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PolicyInfo(ctx context.Context, in *QueryPolicyInfoRequest, opts ...grpc.CallOption) (*QueryPolicyInfoResponse, error) {
	out := new(QueryPolicyInfoResponse)
	err := c.cc.Invoke(ctx, "/StylusFrost.policy.policy.Query/PolicyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoliciesByRegoCode(ctx context.Context, in *QueryPoliciesByRegoCodeRequest, opts ...grpc.CallOption) (*QueryPoliciesByRegoCodeResponse, error) {
	out := new(QueryPoliciesByRegoCodeResponse)
	err := c.cc.Invoke(ctx, "/StylusFrost.policy.policy.Query/PoliciesByRegoCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PolicyHistory(ctx context.Context, in *QueryPolicyHistoryRequest, opts ...grpc.CallOption) (*QueryPolicyHistoryResponse, error) {
	out := new(QueryPolicyHistoryResponse)
	err := c.cc.Invoke(ctx, "/StylusFrost.policy.policy.Query/PolicyHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Rego gets the binary code and metadata for a singe rego code
	Rego(context.Context, *QueryRegoRequest) (*QueryRegoResponse, error)
	// Regos gets the metadata for all stored rego codes
	Regos(context.Context, *QueryRegosRequest) (*QueryRegosResponse, error)
	// PolicyInfo gets the policy meta data
	PolicyInfo(context.Context, *QueryPolicyInfoRequest) (*QueryPolicyInfoResponse, error)
	// PoliciesByRegoCode lists all smart policies for a rego id
	PoliciesByRegoCode(context.Context, *QueryPoliciesByRegoCodeRequest) (*QueryPoliciesByRegoCodeResponse, error)
	// PolicyHistory gets the policy code history
	PolicyHistory(context.Context, *QueryPolicyHistoryRequest) (*QueryPolicyHistoryResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Rego(ctx context.Context, req *QueryRegoRequest) (*QueryRegoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rego not implemented")
}
func (*UnimplementedQueryServer) Regos(ctx context.Context, req *QueryRegosRequest) (*QueryRegosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Regos not implemented")
}
func (*UnimplementedQueryServer) PolicyInfo(ctx context.Context, req *QueryPolicyInfoRequest) (*QueryPolicyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicyInfo not implemented")
}
func (*UnimplementedQueryServer) PoliciesByRegoCode(ctx context.Context, req *QueryPoliciesByRegoCodeRequest) (*QueryPoliciesByRegoCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoliciesByRegoCode not implemented")
}
func (*UnimplementedQueryServer) PolicyHistory(ctx context.Context, req *QueryPolicyHistoryRequest) (*QueryPolicyHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicyHistory not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Rego_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRegoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Rego(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StylusFrost.policy.policy.Query/Rego",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Rego(ctx, req.(*QueryRegoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Regos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRegosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Regos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StylusFrost.policy.policy.Query/Regos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Regos(ctx, req.(*QueryRegosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PolicyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPolicyInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PolicyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StylusFrost.policy.policy.Query/PolicyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PolicyInfo(ctx, req.(*QueryPolicyInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoliciesByRegoCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoliciesByRegoCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoliciesByRegoCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StylusFrost.policy.policy.Query/PoliciesByRegoCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoliciesByRegoCode(ctx, req.(*QueryPoliciesByRegoCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PolicyHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPolicyHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PolicyHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StylusFrost.policy.policy.Query/PolicyHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PolicyHistory(ctx, req.(*QueryPolicyHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "StylusFrost.policy.policy.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Rego",
			Handler:    _Query_Rego_Handler,
		},
		{
			MethodName: "Regos",
			Handler:    _Query_Regos_Handler,
		},
		{
			MethodName: "PolicyInfo",
			Handler:    _Query_PolicyInfo_Handler,
		},
		{
			MethodName: "PoliciesByRegoCode",
			Handler:    _Query_PoliciesByRegoCode_Handler,
		},
		{
			MethodName: "PolicyHistory",
			Handler:    _Query_PolicyHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "policy/query.proto",
}

func (m *QueryRegoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RegoId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RegoId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.RegoInfoResponse != nil {
		{
			size, err := m.RegoInfoResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegoInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegoInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegoInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EntryPoints) > 0 {
		for iNdEx := len(m.EntryPoints) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EntryPoints[iNdEx])
			copy(dAtA[i:], m.EntryPoints[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.EntryPoints[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RegoHash) > 0 {
		i -= len(m.RegoHash)
		copy(dAtA[i:], m.RegoHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RegoHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.RegoID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RegoID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegosRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegosRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegosRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegosResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegosResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RegoInfos) > 0 {
		for iNdEx := len(m.RegoInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RegoInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPolicyInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPolicyInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPolicyInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPolicyInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPolicyInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPolicyInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PolicyInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoliciesByRegoCodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoliciesByRegoCodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoliciesByRegoCodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RegoId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RegoId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoliciesByRegoCodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoliciesByRegoCodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoliciesByRegoCodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Policies) > 0 {
		for iNdEx := len(m.Policies) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Policies[iNdEx])
			copy(dAtA[i:], m.Policies[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Policies[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPolicyHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPolicyHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPolicyHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPolicyHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPolicyHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPolicyHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryRegoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegoId != 0 {
		n += 1 + sovQuery(uint64(m.RegoId))
	}
	return n
}

func (m *QueryRegoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegoInfoResponse != nil {
		l = m.RegoInfoResponse.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RegoInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegoID != 0 {
		n += 1 + sovQuery(uint64(m.RegoID))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RegoHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.EntryPoints) > 0 {
		for _, s := range m.EntryPoints {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRegosRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRegosResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RegoInfos) > 0 {
		for _, e := range m.RegoInfos {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPolicyInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPolicyInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.PolicyInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPoliciesByRegoCodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegoId != 0 {
		n += 1 + sovQuery(uint64(m.RegoId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoliciesByRegoCodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for _, s := range m.Policies {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPolicyHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPolicyHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryRegoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegoId", wireType)
			}
			m.RegoId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegoId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegoInfoResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegoInfoResponse == nil {
				m.RegoInfoResponse = &RegoInfoResponse{}
			}
			if err := m.RegoInfoResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegoInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegoInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegoInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegoID", wireType)
			}
			m.RegoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegoID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegoHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegoHash = append(m.RegoHash[:0], dAtA[iNdEx:postIndex]...)
			if m.RegoHash == nil {
				m.RegoHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryPoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryPoints = append(m.EntryPoints, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegosRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegosRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegosRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegoInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegoInfos = append(m.RegoInfos, RegoInfoResponse{})
			if err := m.RegoInfos[len(m.RegoInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPolicyInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPolicyInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPolicyInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPolicyInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPolicyInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPolicyInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PolicyInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoliciesByRegoCodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoliciesByRegoCodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoliciesByRegoCodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegoId", wireType)
			}
			m.RegoId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegoId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoliciesByRegoCodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoliciesByRegoCodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoliciesByRegoCodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policies = append(m.Policies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPolicyHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPolicyHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPolicyHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPolicyHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPolicyHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPolicyHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, PolicyRegoHistoryEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
